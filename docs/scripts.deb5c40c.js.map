{"version":3,"sources":["src/errorMessages.ts","src/scripts.ts"],"names":[],"mappings":"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","file":"scripts.deb5c40c.js","sourceRoot":"..","sourcesContent":["interface UserMediaErrorMessage {\n  name: string;\n  message: string;\n}\n\nexport const errorMessages: UserMediaErrorMessage[] = [\n  {\n    name: 'NotFoundError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'DevicesNotFoundError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'NotReadableError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'TrackStartError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'OverconstrainedError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'ConstraintNotSatisfiedError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'NotAllowedError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'PermissionDeniedError',\n    message: 'Looks like we cant access your webcam',\n  },\n];\n\nexport function getFriendlyErrorMessage(err: Error): string {\n  const errorMessage = errorMessages.find((error) => error.name === err.name);\n  if (errorMessage) return errorMessage.message;\n  return 'Oops - something went wrong!';\n}\n","import { getFriendlyErrorMessage } from './errorMessages';\n\nconst videoHolder = document.querySelector<HTMLDivElement>('.video');\nconst text = document.querySelector<HTMLParagraphElement>('.text');\nconst startbutton = document.querySelector<HTMLButtonElement>('.start-camera');\n\nfunction handleError(err: Error) {\n  if (!text) throw new Error('shit');\n  text.textContent = getFriendlyErrorMessage(err);\n}\n\nasync function getCameras() {\n  const devices = await navigator.mediaDevices.enumerateDevices();\n  const cameras = devices\n    .filter((device) => device.kind === 'videoinput')\n    .filter((device) => !device.label.includes('Camo'));\n  // camera 2\n  return cameras;\n}\n\nfunction createVideoElementFromCamera(camera: MediaDeviceInfo) {\n  const markup = `\n    <div class=\"camera\">\n      <video autoplay playsinline muted></video>\n      <p>${camera.label}</p>\n    </div>\n  `;\n  const fragment = document.createRange().createContextualFragment(markup);\n  return fragment;\n}\n\nasync function requestIntialAccess() {\n  // Check elements exist\n  if (!videoHolder) return;\n  // clear out old cameras\n  videoHolder.innerHTML = '';\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: false,\n    video: true,\n  });\n  console.log('initial stream');\n  const cameras = await getCameras();\n  // See how many streams we are allowed access to\n  const streamPromises = cameras.map((camera) =>\n    navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: { deviceId: { exact: camera.deviceId } },\n    })\n  );\n  // wait for access to ALL the streams\n  const streams = await Promise.all(streamPromises).catch(console.error);\n  console.log({ streams });\n\n  // Create video elements for each\n  const videoFragment: DocumentFragment[] = cameras.map(\n    createVideoElementFromCamera\n  );\n  // dump them into the DOM\n  videoFragment.forEach((el) => videoHolder.append(el));\n\n  // Assign the src media of each camera to the video elements\n  const videoElements = videoHolder.querySelectorAll('video');\n  videoElements.forEach((el, i) => {\n    el.srcObject = streams[i];\n  });\n}\n\ntype Mode = 'picture-in-picture' | 'inline';\ninterface SafariHTMLVideoElement extends HTMLVideoElement {\n  webkitSupportsPresentationMode: boolean;\n  webkitPresentationMode: Mode;\n  webkitSetPresentationMode: (mode: Mode) => void;\n}\n\nstartbutton?.addEventListener('click', requestIntialAccess);\nvideoHolder?.addEventListener('click', (e: MouseEvent) => {\n  if (e.target instanceof HTMLVideoElement) {\n    const video = e.target;\n    if ('requestPictureInPicture' in e.target) {\n      video.requestPictureInPicture();\n    }\n    // Safari? tHis doesnt work\n    if ('webkitSupportsPresentationMode' in video) {\n      (video as SafariHTMLVideoElement).webkitSetPresentationMode(\n        (video as SafariHTMLVideoElement).webkitPresentationMode ===\n          'picture-in-picture'\n          ? 'inline'\n          : 'picture-in-picture'\n      );\n    }\n  }\n});\nrequestIntialAccess();\n"]}